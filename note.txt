1，controller里面的js为什么要那么引用呢？
  每个路由里面调用相应的控制器的方法

2，ssr 服务端渲染w

3，腾讯云服务器密码：this2478

进程，线程，协程

1，为了多任务而生
2，计算机的运算任务主要分两种，cpu密集型，io密集型
3，io 输入输出，指的是计算机外设
4，io 效率远低于cpu，

进程：程序一开始是。exe  激活 exe，变成进程，是个动态的概念，是一个运行单位，
一个进程是一个单位，主要使用两个地方 cpu，内存。
用到cpu主要是占了cpu的时间，cpu内核逐条运行代码，多任务其实就是时间片
有了进程 操作系统就方便的切换进程，形成看似一次性做多个任务的假象

操作系统直接接管cpu，内存。 负责维护其他进程，通知cpu来管理其他进程

进程里面至少有一个线程，线程是不能独立存在的。操作系统，是直接管理的进程，
但是操作系统可以调度进程中的线程

ngnix，nodejs io密集型

pm2:
  利用linux进程管理机制，pm2作为主进程拉起nodejs 实例，
  为了充分利用服务器的多核资源，或者统一管理nodejs 的程序
  的时候，用它来统一管理防止资源冲突，必须要有一个主进程来管理
  子进程可以共享端口

  代码：
    先检测是不是主进程
    是的话，fork ，按照cpu数量核心，分出子进程，循环执行
    如果不是主进程
    执行node的启动文件 app.js
    主进程只运行主进程代码
    子进程只运行子进程代码

  为什么pm2 几个线程不冲突：
    操作系统不关心子进程，子进程由主进程创建，子进程共享主进程创建的
    文件，因为你的文件具柄已经打开，子进程打开的文件都是主进程的具柄
    所以不会冲突

CI：持续集成    CD：持续交付

前段模块化：
  1，负责模块管理，资源加载
  2，commonjs 主要是node，
  3，每个文件就是一个模块，有自己的作用域。在一个文件里面的变量都是私有的
  4，网络的io比本地的io慢很多很多

前段组件化：


Gulp：
  进行流清洗

整个项目中，server应该由 gulp接管
          web由webpack接管

权限：chmod -R +x scripts
缓存：

node 非正确退出
  process.exit(-1)
   





